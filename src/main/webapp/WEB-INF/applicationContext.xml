<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context-4.3.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
						http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-4.3.xsd"
	>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:basePackage="org.fkit.mapper" p:sqlSessionFactoryBeanName="sqlSessionFactory" />
	
	<!-- 扫描 org.fkit 包下面的 java 文件，有 Spring 的相关注解的类，则把这些类注册为 Spring 的 bean -->
	<context:component-scan base-package="org.fkit" />
		
	<!-- 引入配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath*:db.properties</value>
            </list>
        </property>
    </bean>
	
	<!-- 配置 Druid 数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->  
        <property name="url" value="${dataSource.jdbcUrl}"/>  
        <property name="username" value="${dataSource.user}"/>  
        <property name="password" value="${dataSource.password}"/>  
  		
        <!-- 配置初始化大小、最小、最大 -->  
        <property name="initialSize" value="${dataSource.initialSize}"/>  
        <property name="minIdle" value="${dataSource.minIdle}"/>  
        <property name="maxActive" value="${dataSource.maxActive}"/>  
  		
        <!-- 配置获取连接等待超时的时间 -->  
        <property name="maxWait" value="${dataSource.maxWait}"/>  
  		
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
        <property name="timeBetweenEvictionRunsMillis" value="${dataSource.timeBetweenEvictionRunsMillis}"/>  
  		
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
        <property name="minEvictableIdleTimeMillis" value="${dataSource.minEvictableIdleTimeMillis}"/>
        
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="false"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20"/>

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
	</bean>
	
	<!-- 配置 SqlSessionFactory, org.mybatis.spring.SqlSessionFactoryBean 是 Mybatis 社区开发用于整合 Spring 的 bean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource" p:configLocation="classpath:mybatis-config.xml" />
	
	<!-- JDBC 事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager" p:dataSource-ref="dataSource" />
	
	<!-- 启用支持 annotation 注解方式事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

</beans>